#!/bin/bash

# ===============================
# DAPATKAN IP DAN TANGGAL
# ===============================
ipsaya=$(curl -sS ipv4.icanhazip.com)
data_server=$(curl -v --insecure --silent https://google.com/ 2>&1 | grep Date | sed -e 's/< Date: //')
date_list=$(date +"%Y-%m-%d" -d "$data_server")

# ===============================
# AMBIL DATA CLIENT 
# ===============================
MYIP=$ipsaya

# URL data izin
url_izin="https://raw.githubusercontent.com/alrescha79-cmd/sc-vpn/refs/heads/main/izin"

# Ambil data dari GitHub dengan format baru: ### User Date IP
data_izin=$(curl -sS "$url_izin")
user_line=$(echo "$data_izin" | grep "$MYIP")

if [ -n "$user_line" ]; then
    username=$(echo "$user_line" | awk '{print $2}')
    valid=$(echo "$user_line" | awk '{print $3}')
else
    username=""
    valid=""
fi

echo "$username" >/usr/bin/user
echo "$valid" >/usr/bin/e

# ===============================
# TANGGAL HARI INI DAN EXPIRY
# ===============================
today=$(date +'%Y-%m-%d')
Exp1="$valid"  # tanggal expiry

# ===============================
# FUNGSI VALIDASI MASA AKTIF
# ===============================
validate_access() {
    # Cek jika data user tidak ditemukan
    if [ -z "$username" ] || [ -z "$valid" ]; then
        clear
        echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
        echo -e "${red}║                           AKSES DITOLAK                            ║${neutral}"
        echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
        echo -e ""
        echo -e " IP Anda (${MYIP}) tidak terdaftar dalam sistem"
        echo -e ""
        echo -e " Silakan hubungi administrator untuk mendapatkan akses:"
        echo -e " 📱 Telegram: https://t.me/Alrescha79"
        echo -e " 📧 Email: anggun@cakson.my.id"
        echo -e ""
        echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
        echo -e " Tekan Enter untuk keluar..."
        read
        exit 1
    fi
    
    # Cek masa aktif
    current_date=$(date +%Y-%m-%d)
    if [[ "$valid" < "$current_date" ]]; then
        # Hitung berapa hari sudah expired
        expired_days=$(( ( $(date -d "$current_date" +%s) - $(date -d "$valid" +%s) ) / 86400 ))
        
        clear
        echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
        echo -e "${red}║                        AKSES KADALUARSA                           ║${neutral}"
        echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
        echo -e ""
        echo -e " Masa aktif script Anda telah berakhir!"
        echo -e ""
        echo -e " Detail Akses:"
        echo -e "   • User ID: ${username}"
        echo -e "   • IP Address: ${MYIP}"
        echo -e "   • Tanggal Kadaluarsa: ${valid}"
        echo -e "   • Sudah Expired: ${expired_days} hari"
        echo -e ""
        echo -e " Untuk memperpanjang masa aktif, hubungi:"
        echo -e " 📱 Telegram: https://t.me/Alrescha79"
        echo -e " 📧 Email: anggun@cakson.my.id"
        echo -e " 💰 Informasi Harga & Paket Tersedia"
        echo -e ""
        echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
        echo -e " Tekan Enter untuk keluar..."
        read
        exit 1
    fi
}

# ===============================
# CEK STATUS ACTIVE / EXPIRED
# ===============================
# Panggil fungsi validasi sebelum menampilkan menu
validate_access

Info="(${green}Active${neutral})"
Error="(${red}Expired${neutral})"
if [[ "$today" < "$Exp1" ]]; then
    sts="${Info}"
else
    sts="${Error}"
fi


        # Color variables
        green="\e[38;5;87m"
        red="\e[38;5;196m"
        neutral="\e[0m"
        blue="\e[38;5;130m"
        orange="\e[38;5;99m"
        yellow="\e[38;5;226m"
        purple="\e[38;5;141m"
        bold_white="\e[1;37m"
        reset="\e[0m"
        pink="\e[38;5;205m"

        # Function to convert byte size to a readable format
        convert_size() {
            local -i bytes=$1
            if [[ $bytes -lt 1024 ]]; then
                echo "${bytes}B"
            elif [[ $bytes -lt 1048576 ]]; then
                echo "$(((bytes + 1023) / 1024))KB"
            elif [[ $bytes -lt 1073741824 ]]; then
                echo "$(((bytes + 1048575) / 1048576))MB"
            else
                echo "$(((bytes + 1073741823) / 1073741824))GB"
            fi
        }

        # Function to print rainbow text
        print_rainbow() {
            local text="$1"
            local length=${#text}
            local start_color=(0 5 0)
            local mid_color=(0 200 0)
            local end_color=(0 5 0)

            for ((i = 0; i < length; i++)); do
                local progress=$((i * 100 / (length - 1)))

                if [ $progress -lt 50 ]; then
                    local factor=$((progress * 2))
                    r=$(((start_color[0] * (100 - factor) + mid_color[0] * factor) / 100))
                    g=$(((start_color[1] * (100 - factor) + mid_color[1] * factor) / 100))
                    b=$(((start_color[2] * (100 - factor) + mid_color[2] * factor) / 100))
                else
                    local factor=$(((progress - 50) * 2))
                    r=$(((mid_color[0] * (100 - factor) + end_color[0] * factor) / 100))
                    g=$(((mid_color[1] * (100 - factor) + end_color[1] * factor) / 100))
                    b=$(((mid_color[2] * (100 - factor) + end_color[2] * factor) / 100))
                fi

                printf "\e[38;2;%d;%d;%dm%s" "$r" "$g" "$b" "${text:$i:1}"
            done
            echo -e "$reset" # Reset color at the end
        }

        function autokill_ssh() {
            local sts=$(grep -qE "^SHELL" /etc/cron.d/autokill && echo -e "\033[32m[ON]\033[0m" || echo -e "\033[31m[OFF]\033[0m")
            clear
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e "${orange}║                    ${green}SSH OVPN AUTO KILL MANAGER${orange}                    ║${neutral}"
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e ""
            echo -e " Autokill Status: $sts"
            echo -e ""
            echo -e " ${green}[1]${neutral} AutoKill After 5 Minutes"
            echo -e " ${green}[2]${neutral} AutoKill After 10 Minutes"
            echo -e " ${green}[3]${neutral} AutoKill After 15 Minutes"
            echo -e " ${green}[4]${neutral} Disable AutoKill/MultiLogin"
            echo -e " ${red}[x]${neutral} Exit"
            echo -e ""
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"

            read -p "Choose an option [1-4 or x]: " pilihan
            case $pilihan in
            1)
                echo -e "SHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n*/5 * * * * root /usr/bin/autokill" >/etc/cron.d/autokill
                clear
                echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e "${green}║                        ${blue}AUTOKILL ACTIVATED${green}                        ║${neutral}"
                echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e ""
                echo -e " ${green}✓${neutral} AutoKill: Every 5 Minutes"
                echo -e " ${green}✓${neutral} Cron service restarted successfully"
                echo -e ""
                echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
                service cron restart >/dev/null 2>&1
                ;;
            2)
                echo -e "SHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n*/10 * * * * root /usr/bin/autokill" >/etc/cron.d/autokill
                clear
                echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e "${green}║                        ${blue}AUTOKILL ACTIVATED${green}                        ║${neutral}"
                echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e ""
                echo -e " ${green}✓${neutral} AutoKill: Every 10 Minutes"
                echo -e " ${green}✓${neutral} Cron service restarted successfully"
                echo -e ""
                echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
                service cron restart >/dev/null 2>&1
                ;;
            3)
                echo -e "SHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n*/15 * * * * root /usr/bin/autokill" >/etc/cron.d/autokill
                clear
                echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e "${green}║                        ${blue}AUTOKILL ACTIVATED${green}                        ║${neutral}"
                echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e ""
                echo -e " ${green}✓${neutral} AutoKill: Every 15 Minutes"
                echo -e " ${green}✓${neutral} Cron service restarted successfully"
                echo -e ""
                echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
                service cron restart >/dev/null 2>&1
                ;;
            4)
                if [ ! -f /etc/cron.d/autokill ]; then
                    clear
                    echo -e "${yellow}══════════════════════════════════════════════════════════════════════${neutral}"
                    echo -e "${yellow}║                       ${blue}AUTOKILL STATUS${yellow}                        ║${neutral}"
                    echo -e "${yellow}══════════════════════════════════════════════════════════════════════${neutral}"
                    echo -e ""
                    echo -e " ${yellow}⚠${neutral} AutoKill Already ${red}Disabled${neutral}"
                    echo -e ""
                    echo -e "${yellow}══════════════════════════════════════════════════════════════════════${neutral}"
                    return
                fi
                rm -f /etc/cron.d/autokill
                clear
                echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e "${red}║                        ${blue}AUTOKILL DISABLED${red}                        ║${neutral}"
                echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e ""
                echo -e " ${green}✓${neutral} AutoKill ${red}Disabled${neutral} successfully"
                echo -e " ${green}✓${neutral} Cron service restarted"
                echo -e ""
                echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
                service cron restart >/dev/null 2>&1
                return
                ;;
            x | X)
                clear
                return
                ;;
            *)
                echo "Invalid choice. Please try again."
                return
                ;;
            esac

        }

        # Function to lock SSH account
        function lock_ssh() {
            clear
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e "${orange}║                      ${green}LOCK SSH OVPN ACCOUNT${orange}                      ║${neutral}"
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e ""
            NUMBER_OF_CLIENTS=$(grep -c -E "^### " "/etc/ssh/.ssh.db")
            if [[ ${NUMBER_OF_CLIENTS} == '0' ]]; then
                echo -e " ${red}No registered clients found!${neutral}"
                echo -e ""
                echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e " Press Enter to return to menu"
                read
                return
            fi
            echo -e " ${green}NO  USERNAME         EXPIRY DATE${neutral}"
            echo -e " ───────────────────────────────────"
            grep -E "^### " "/etc/ssh/.ssh.db" | cut -d ' ' -f 2-3 | awk '{printf " %-3s %-15s %s\n", NR")", $1, $2}' | while read line; do
                echo -e "$line"
            done
            echo -e ""
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"

            until [[ ${CLIENT_NUMBER} -ge 1 && ${CLIENT_NUMBER} -le ${NUMBER_OF_CLIENTS} ]]; do
                if [[ ${NUMBER_OF_CLIENTS} == '1' ]]; then
                    read -rp "Select client number [1]: " CLIENT_NUMBER
                else
                    read -rp "Select client number [1-${NUMBER_OF_CLIENTS}]: " CLIENT_NUMBER
                fi

                # Add exception handling for non-numeric input
                if ! [[ ${CLIENT_NUMBER} =~ ^[0-9]+$ ]]; then
                    echo "Error: Please enter a valid number."
                    CLIENT_NUMBER=0
                fi
            done

            username=$(grep -E "^### " "/etc/ssh/.ssh.db" | cut -d ' ' -f 2 | sed -n "${CLIENT_NUMBER}"p)
            if ! grep -q "^$username:" /etc/passwd; then
                echo "Error: Username $username not found in the system."
                read -n 1 -s -r -p "Press any key to return to menu"
                return
            fi

            if passwd -S "$username" | grep -q "L"; then
                echo "Account $username is already locked."
                read -n 1 -s -r -p "Press any key to return to menu"
                return
            fi

            # Add exception for root and admin
            if [[ "$username" == "root" || "$username" == "admin" ]]; then
                echo "Error: Cannot lock $username account as it is a critical system account."
                read -n 1 -s -r -p "Press any key to return to menu"
                return
            fi

            if passwd -l "$username"; then
                clear
                echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e "${green}║                        ${blue}ACCOUNT LOCKED${green}                           ║${neutral}"
                echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e ""
                echo -e " ${green}✓${neutral} Username ${green}$username${neutral} successfully LOCKED!"
                echo -e " ${green}✓${neutral} Login access has been disabled"
                echo -e ""
                echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"

                # Add locking log
                echo "$(date): Account $username locked" >>/var/log/ssh_account_actions.log

                echo -e " Press any key to return to menu"
                read -n 1 -s -r
            else
                clear
                echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e "${red}║                           ${blue}LOCK FAILED${red}                           ║${neutral}"
                echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e ""
                echo -e " ${red}✗${neutral} Failed to lock account $username"
                echo -e ""
                echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e " Press any key to return to menu"
                read -n 1 -s -r
            fi
        }

        # Function to unlock SSH account
        function unlock_ssh() {
            clear
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e "${orange}║                     ${green}UNLOCK SSH OVPN ACCOUNT${orange}                     ║${neutral}"
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e ""
            NUMBER_OF_CLIENTS=$(grep -c -E "^### " "/etc/ssh/.ssh.db")
            if [[ ${NUMBER_OF_CLIENTS} == '0' ]]; then
                echo -e " ${red}No registered clients found!${neutral}"
                echo -e ""
                echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e " Press Enter to return to menu"
                read
                return
            fi
            echo -e " ${green}NO  USERNAME         EXPIRY DATE${neutral}"
            echo -e " ───────────────────────────────────"
            grep -E "^### " "/etc/ssh/.ssh.db" | cut -d ' ' -f 2-3 | awk '{printf " %-3s %-15s %s\n", NR")", $1, $2}' | while read line; do
                echo -e "$line"
            done
            echo -e ""
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"

            until [[ ${CLIENT_NUMBER} -ge 1 && ${CLIENT_NUMBER} -le ${NUMBER_OF_CLIENTS} ]]; do
                if [[ ${NUMBER_OF_CLIENTS} == '1' ]]; then
                    read -rp "Select client number [1]: " CLIENT_NUMBER
                else
                    read -rp "Select client number [1-${NUMBER_OF_CLIENTS}]: " CLIENT_NUMBER
                fi

                # Add exception handling for non-numeric input
                if ! [[ ${CLIENT_NUMBER} =~ ^[0-9]+$ ]]; then
                    echo "Error: Please enter a valid number."
                    CLIENT_NUMBER=0
                fi
            done

            username=$(grep -E "^### " "/etc/ssh/.ssh.db" | cut -d ' ' -f 2 | sed -n "${CLIENT_NUMBER}"p)
            if ! grep -q "^$username:" /etc/passwd; then
                echo "Error: Username $username not found in the system."
                read -n 1 -s -r -p "Press any key to return to the menu"
                return
            fi

            if ! passwd -S "$username" | grep -q "L"; then
                echo "Account $username is already unlocked."
                read -n 1 -s -r -p "Press any key to return to the menu"
                return
            fi

            if passwd -u "$username"; then
                clear
                echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e "${green}║                       ${blue}ACCOUNT UNLOCKED${green}                        ║${neutral}"
                echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e ""
                echo -e " ${green}✓${neutral} Username ${green}$username${neutral} successfully UNLOCKED!"
                echo -e " ${green}✓${neutral} Login access has been restored"
                echo -e ""
                echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
            else
                clear
                echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e "${red}║                          ${blue}UNLOCK FAILED${red}                          ║${neutral}"
                echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e ""
                echo -e " ${red}✗${neutral} Failed to unlock account $username"
                echo -e ""
                echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
            fi
            echo -e " Press any key to return to menu"
            read -n 1 -s -r
        }
        # Function to display SSH account details
        function detail_ssh() {
            clear
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e "${orange}║                     ${green}SSH OVPN ACCOUNT DETAILS${orange}                     ║${neutral}"
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e ""
            NUMBER_OF_CLIENTS=$(grep -c -E "^### " "/etc/ssh/.ssh.db")
            if [[ ${NUMBER_OF_CLIENTS} == '0' ]]; then
                echo -e " ${red}No registered clients found!${neutral}"
                echo -e ""
                echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e " Press Enter to return to menu"
                read
                return
            fi
            echo -e " ${green}NO  USERNAME         EXPIRY DATE${neutral}"
            echo -e " ───────────────────────────────────"
            grep -E "^### " "/etc/ssh/.ssh.db" | cut -d ' ' -f 2-3 | awk '{printf " %-3s %-15s %s\n", NR")", $1, $2}' | while read line; do
                echo -e "$line"
            done
            echo -e ""
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"

            until [[ ${CLIENT_NUMBER} -ge 1 && ${CLIENT_NUMBER} -le ${NUMBER_OF_CLIENTS} ]]; do
                if [[ ${NUMBER_OF_CLIENTS} == '1' ]]; then
                    read -rp "Select client number [1]: " CLIENT_NUMBER
                else
                    read -rp "Select client number [1-${NUMBER_OF_CLIENTS}]: " CLIENT_NUMBER
                fi

                # Add exception handling for non-numeric input
                if ! [[ ${CLIENT_NUMBER} =~ ^[0-9]+$ ]]; then
                    echo "Error: Please enter a valid number."
                    CLIENT_NUMBER=0
                fi
            done

            username=$(grep -E "^### " "/etc/ssh/.ssh.db" | cut -d ' ' -f 2 | sed -n "${CLIENT_NUMBER}"p)
            clear
            echo -e "${blue}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e "${blue}║                    ${green}ACCOUNT DETAILS: $username${blue}                     ║${neutral}"
            echo -e "${blue}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e ""
            
            # Add exception handling for missing log file
            if [ -f "/etc/xray/log-createssh-${username}.log" ]; then
                cat "/etc/xray/log-createssh-${username}.log"
            else
                echo -e " ${yellow}⚠${neutral} Log file not found for this user."
                echo -e " ${yellow}⚠${neutral} This might be a manually created account."
            fi
            echo -e ""
            echo -e "${blue}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e " Press any key to return to menu"
            read -n 1 -s -r
        }

        # Function to change SSH account limit
        function changelimit() {
            clear
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e "${orange}║                   ${green}CHANGE SSH OVPN ACCOUNT LIMIT${orange}                   ║${neutral}"
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e ""
            NUMBER_OF_CLIENTS=$(grep -c -E "^### " "/etc/ssh/.ssh.db")
            if [[ ${NUMBER_OF_CLIENTS} == '0' ]]; then
                echo -e " ${red}No registered clients found!${neutral}"
                echo -e ""
                echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e " Press Enter to return to menu"
                read
                return
            fi
            echo -e " ${green}NO  USERNAME         EXPIRY DATE${neutral}"
            echo -e " ────────────────────────────────────"
            grep -E "^### " "/etc/ssh/.ssh.db" | cut -d ' ' -f 2-3 | awk '{printf " %-3s %-15s %s\n", NR")", $1, $2}' | while read line; do
                echo -e "$line"
            done
            echo -e ""
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"

            until [[ ${CLIENT_NUMBER} -ge 1 && ${CLIENT_NUMBER} -le ${NUMBER_OF_CLIENTS} ]]; do
                if [[ ${NUMBER_OF_CLIENTS} == '1' ]]; then
                    read -rp "Select client number [1]: " CLIENT_NUMBER
                else
                    read -rp "Select client number [1-${NUMBER_OF_CLIENTS}]: " CLIENT_NUMBER
                fi
            done

            user=$(grep -E "^### " "/etc/ssh/.ssh.db" | cut -d ' ' -f 2 | sed -n "${CLIENT_NUMBER}"p)

            clear
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e "${orange}║                      ${green}ENTER LIMIT FOR ACCOUNT${orange}                      ║${neutral}"
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e ""
            echo -e " USERNAME : ${green}${user}${neutral}"
            echo -e ""
            while true; do
                read -p " IP LIMIT (MINIMUM 1): " iplim
                if [[ $iplim == "x" ]]; then
                    echo "Cancelled."
                    return
                elif [[ $iplim =~ ^[1-9][0-9]*$ ]]; then
                    break
                else
                    echo -e "${red}Error: Enter a positive number greater than 0 or 'x' to cancel.${neutral}"
                fi
            done
            echo "${iplim}" >/etc/ssh/${user}
            clear
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e "${orange}║                   ${green}ACCOUNT LIMIT CHANGE SUCCESSFUL${orange}                   ║${neutral}"
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e ""
            echo -e " Username: ${green}$user${neutral}"
            echo -e " IP Limit: ${green}$iplim${neutral} devices"
            echo -e ""
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e " Press any key to return to menu"
            read -n 1 -s -r
        }

        # Function to display SSH members
        function member_ssh() {
            clear
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e "${orange}║                     ${green}SSH OVPN ACCOUNT DETAILS${orange}                     ║${neutral}"
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e ""

            if [ ! -f "/etc/ssh/.ssh.db" ]; then
                echo -e " ${red}Database file not found${neutral}"
                echo -e ""
                echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e " Press any key to return to menu"
                read -n 1 -s -r
                return
            fi

            data=$(grep '^###' "/etc/ssh/.ssh.db" | cut -d ' ' -f 2,3)
            now=$(date +"%Y-%m-%d")

            if [ -z "$data" ]; then
                echo -e " ${red}No SSH accounts registered${neutral}"
                echo -e ""
                echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e " Press any key to return to menu"
                read -n 1 -s -r
                return
            fi

            while IFS= read -r line; do
                user=$(echo $line | cut -d ' ' -f 1)
                exp=$(echo $line | cut -d ' ' -f 2)

                if [ -z "$exp" ]; then
                    echo -e " ${red}Error: Expiration date not found for $user${neutral}"
                    continue
                fi

                d1=$(date -d "$exp" +%s)
                d2=$(date -d "$now" +%s)
                dayleft=$((($d1 - $d2) / 86400))

                status="$(passwd -S $user 2>/dev/null | awk '{print $2}')"
                if [ $? -ne 0 ]; then
                    echo -e " ${red}Error: Failed to get status for $user${neutral}"
                    continue
                fi

                iplimit=$(cat /etc/ssh/${user} 2>/dev/null || echo "Unlimited")

                if [[ "$status" = "L" ]]; then
                    wf="${red}Locked ${neutral}"
                else
                    wf="${green}Active ${neutral}"
                fi

                echo -e " USERNAME : ${green}$user${neutral}"
                echo -e " STATUS   : $wf"
                echo -e " IP LIMIT : ${blue}$iplimit${neutral}"
                echo -e " DAYS LEFT: ${yellow}$dayleft DAYS${neutral}"
                echo -e " EXPIRES  : ${orange}$exp${neutral}"
                echo -e " ────────────────────────────────────────────────────────────────────"
            done <<<"$data"

            total=$(echo "$data" | wc -l)
            echo -e ""
            echo -e " Total Accounts: ${green}$total${neutral}"
            echo -e ""
            echo -e "${orange}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e " Press any key to return to menu"
            read -n 1 -s -r
        }

        # Function to display SSH menu
        display_ssh_menu() {
            clear
            echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e "${green}║                      ${blue}MENU SSH/OPENVPN MANAGER${green}                      ║${neutral}"
            echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e ""
            echo -e " ${green}[1]${neutral}  Buat Akun SSH/OpenVPN        ${green}[7]${neutral}  Kunci Akun SSH/OpenVPN"
            echo -e " ${green}[2]${neutral}  Hapus Akun SSH/OpenVPN       ${green}[8]${neutral}  Buka Kunci Akun SSH/OVPN"
            echo -e " ${green}[3]${neutral}  Perpanjang Akun SSH/OpenVPN  ${green}[9]${neutral}  Detail Akun SSH/OpenVPN"
            echo -e " ${green}[4]${neutral}  Cek Login Akun SSH/OpenVPN   ${green}[10]${neutral} Autokill SSH/OpenVPN"
            echo -e " ${green}[5]${neutral}  Daftar Member SSH/OpenVPN    ${green}[11]${neutral} Buat Trial SSH/OpenVPN"
            echo -e " ${green}[6]${neutral}  Ubah Limit Akun SSH/OpenVPN  ${red}[x]${neutral}  Kembali ke Menu Utama"
            echo -e ""
            echo -e "${green}══════════════════════════════════════════════════════════════════════${neutral}"
            echo -e ""
            read -p " Masukkan pilihan Anda [1-11/x]: " ssh_choice

            case $ssh_choice in
            1) addssh ;;
            2) dellssh ;;
            3) renewssh ;;
            4) checkssh ;;
            5) member_ssh ;;
            6) changelimit ;;
            7) lock_ssh ;;
            8) unlock_ssh ;;
            9) detail_ssh ;;
            10) autokill_ssh ;;
            11) trialssh ;;
            x | X)
                clear
                echo -e "${green}Kembali ke menu utama...${neutral}"
                menu
                ;;
            *)
                clear
                echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e "${red}║                           PILIHAN TIDAK VALID                       ║${neutral}"  
                echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e ""
                echo -e " ${red}Pilihan yang Anda masukkan tidak tersedia!${neutral}"
                echo -e " ${yellow}Silahkan pilih menu yang tersedia [1-11/x]${neutral}"
                echo -e ""
                echo -e "${red}══════════════════════════════════════════════════════════════════════${neutral}"
                echo -e " Tekan Enter untuk mencoba lagi..." 
                read
                display_ssh_menu
                ;;
            esac
        }
        # Call function to display menu
        display_ssh_menu
    